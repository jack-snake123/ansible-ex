１．製品インストール
①vagrant_2.2.3_x86_64.msi
②VirtualBox-6.0.4-128413-Win.exe

２．ファイルの編集
"C:\HashiCorp\Vagrant\embedded\gems\2.2.3\gems\vagrant-2.2.3\lib\vagrant\util\io.rb"

data << io.readpartial(READ_CHUNK_SIZE).encode("UTF-8", Encoding.default_external)
↓
data << io.readpartial(READ_CHUNK_SIZE).encode("Windows-31J", Encoding.default_external)

２．コマンドプロンプトで環境構築
C:\Users\tepco>vagrant -v
Vagrant 2.2.3

C:\Users\tepco>vagrant box add CentOS7 "C:\Users\tepco\Desktop\構築資料\CentOS-7-x86_64-Vagrant-1803_01.VirtualBox.box"
==> box: Box file was not detected as metadata. Adding it directly...
==> box: Adding box 'CentOS7' (v0) for provider:
    box: Unpacking necessary files from: file:///C:/Users/tepco/Desktop/%8D%EC%8B%C6%8F%D8%90%D5/CentOS-7-x86_64-Vagrant-1803_01.VirtualBox.box
    box: Progress: 100% (Rate: 56.4M/s, Estimated time remaining: --:--:--)
==> box: Successfully added box 'CentOS7' (v0) for 'virtualbox'!

C:\Users\tepco>vagrant init CentOS7
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

C:\Users\tepco>vagrant up

３．TeraTarm接続・WinSCP接続
鍵をコピーして接続時に指定
"C:\Users\tepco\.vagrant\machines\default\virtualbox\private_key"
ユーザー：vagrant
パスワード：vagrant
suパスワード：vagrant

４．前提RPMのインストール（WinSCPでrpmフォルダを転送/tmpに設置）
[root@localhost ~]# cd /tmp/rpm/
[root@localhost rpm]# yum localinstall *.rpm

省略

Complete!

[root@localhost rpm]# yum remove docker docker-client docker-common
[root@localhost rpm]# cd ../dockerce
[root@localhost dockerce]# yum localinstall *.rpm

省略

Complete!

５．コンテナ構築前準備
[root@localhost rpm]# echo $LANG
en_US.UTF-8
[root@localhost rpm]# localectl list-locales

ja_JP
ja_JP.eucjp
ja_JP.ujis
ja_JP.utf8
japanese
japanese.euc

[root@localhost rpm]# localectl set-locale LANG=ja_JP.utf8
[root@localhost rpm]# localectl status
   System Locale: LANG=ja_JP.utf8
       VC Keymap: us
      X11 Layout: n/a
[root@localhost rpm]# cat /etc/locale.conf
LANG=ja_JP.utf8
[root@localhost rpm]# source /etc/locale.conf
[root@localhost rpm]# locale
LANG=ja_JP.utf8
LC_CTYPE="ja_JP.utf8"
LC_NUMERIC="ja_JP.utf8"
LC_TIME="ja_JP.utf8"
LC_COLLATE="ja_JP.utf8"
LC_MONETARY="ja_JP.utf8"
LC_MESSAGES="ja_JP.utf8"
LC_PAPER="ja_JP.utf8"
LC_NAME="ja_JP.utf8"
LC_ADDRESS="ja_JP.utf8"
LC_TELEPHONE="ja_JP.utf8"
LC_MEASUREMENT="ja_JP.utf8"
LC_IDENTIFICATION="ja_JP.utf8"
LC_ALL=
[root@localhost rpm]# date
2019年  6月 17日 月曜日 05:26:56 UTC
[root@localhost rpm]# strings /etc/localtime
TZif2
TZif2
UTC0
[root@localhost rpm]# echo -e 'ZONE="Asia/Tokyo"\nUTC=false' > /etc/sysconfig/clock
[root@localhost rpm]# ln -sf  /usr/share/zoneinfo/Asia/Tokyo /etc/localtime
[root@localhost rpm]# date
2019年  6月 17日 月曜日 14:29:00 JST
[root@localhost rpm]# strings /etc/localtime
TZif2
TZif2
JST-9

６．コンテナ構築（WinSCPでsmartop_jenkins_20190613.tar、Poc2-1フォルダを転送/tmpに設置）
[root@localhost rpm]# systemctl start docker
[root@localhost rpm]# vi /etc/docker/daemon.json
[root@localhost rpm]# cat /etc/docker/daemon.json
{
  "log-driver": "json-file",
  "log-opts": {"max-size": "10m", "max-file": "3"}
}
[root@localhost rpm]# systemctl restart docker
[root@localhost rpm]# systemctl enable docker
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
[root@localhost rpm]# systemctl status docker
● docker.service - Docker Application Container Engine
   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)
   Active: active (running) since 木 2019-06-13 05:53:16 UTC; 26s ago
     Docs: http://docs.docker.com
 Main PID: 5558 (dockerd-current)
   CGroup: /system.slice/docker.service
           tq5558 /usr/bin/dockerd-current --add-runtime docker-runc=/usr/lib...
           mq5564 /usr/bin/docker-containerd-current -l unix:///var/run/docke...

 6月 13 05:53:15 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
 6月 13 05:53:16 localhost.localdomain systemd[1]: Started Docker Applicatio...
 6月 13 05:53:16 localhost.localdomain dockerd-current[5558]: time="2019-06-...
Hint: Some lines were ellipsized, use -l to show in full.
[root@localhost rpm]# cd /tmp/
[root@localhost tmp]# docker load < smartop_jenkins_20190613.tar
b362758f4793: Loading layer 200.1 MB/200.1 MB
b53f43ff4250: Loading layer 787.4 MB/787.4 MB
cddac2689044: Loading layer 146.7 MB/146.7 MB
2c15cb906618: Loading layer 280.9 MB/280.9 MB
036b1335b34d: Loading layer 138.2 MB/138.2 MB
6be8c32d751c: Loading layer 2.566 MB/2.566 MB
a0f336dbba93: Loading layer 39.68 MB/39.68 MB
ab56bd4c2814: Loading layer 160.1 MB/160.1 MB
3fe6a83684b3: Loading layer 380.7 MB/380.7 MB
0bb7a2048cbc: Loading layer 380.7 MB/380.7 MB
Loaded image: smartop_jenkins_20190613:latest
[root@localhost tmp]# docker images
REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
smartop_jenkins_20190613   latest              c22debb0055d        27 hours ago        2.45 GB
[root@localhost tmp]# docker run --privileged -it -d \
     -e LANG=$LANG \
     -p 8080:8080 \
     --name jenkins \
     smartop_jenkins_20190613 /sbin/init
7b73c493d4ed49638eb8a74d42957567260f1b422976d53d2fdf21ae9b9a417d
[root@localhost tmp]# docker ps
CONTAINER ID        IMAGE                      COMMAND             CREATED             STATUS              PORTS                    NAMES
7b73c493d4ed        smartop_jenkins_20190613   "/sbin/init"        12 seconds ago      Up 10 seconds       0.0.0.0:8080->8080/tcp   jenkins
[root@localhost tmp]# docker cp jenkins:/var/jenkins_home /var/
[root@localhost tmp]# docker cp jenkins:/root/.jenkins /root/
[root@localhost tmp]# docker rm -f jenkins
jenkins
[root@localhost tmp]# docker run --privileged -it -d \
     -e LANG=$LANG \
     -p 8080:8080 \
     -v /var/jenkins_home:/var/jenkins_home \
     -v /root/.jenkins:/root/.jenkins \
     --name jenkins \
     smartop_jenkins_20190613 /sbin/init
2d72c22c9397c3580e930b1c0e075a74f0933474a919b905e8fd131afb5c9f3b
[root@localhost tmp]# docker ps
CONTAINER ID        IMAGE                      COMMAND             CREATED             STATUS              PORTS                    NAMES
2d72c22c9397        smartop_jenkins_20190613   "/sbin/init"        7 seconds ago       Up 6 seconds        0.0.0.0:8080->8080/tcp   jenkins
[root@localhost tmp]# docker cp Poc2-1 jenkins:/root/Poc2-1
[root@localhost tmp]# docker exec -it jenkins bash
[root@2d72c22c9397 /]# cd /root/
[root@2d72c22c9397 ~]# ll
total 8
drwxr-xr-x. 6 1000 1000   90  6月 13 15:13 Poc2-1
-rw-------. 1 root root 3407  8月  2  2017 anaconda-ks.cfg
drwxr-xr-x. 1 root root   26  5月 18  2018 ansible
-rw-------. 1 root root 3221  8月  2  2017 original-ks.cfg
[root@2d72c22c9397 ~]# vi /etc/ansible/ansible.cfg
[root@2d72c22c9397 ~]# cat /etc/ansible/ansible.cfg

[ssh_connection]
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null

[root@2d72c22c9397 ~]# exit

７．ゴミフォルダの削除
[root@localhost tmp]# rm -rf /vagrant

８．Jenkins起動テスト
VrtualBoxのポートフォワード設定で8080を8081に割り当てる
Jenkinsに接続して実行テスト
http://127.0.0.1:8081
ユーザー：es1user
パスワード：es1user

パスワード変更ジョブを実行する

９．接続テスト
[root@localhost tmp]# docker exec -it jenkins bash
[root@2d72c22c9397 /]# cd /root/Poc2-1
[root@2d72c22c9397 Poc2-1]# ansible-playbook -i hosts/hosts2 yml/test.yml -vv --vault-password-file ~/ansible/.vault_password
